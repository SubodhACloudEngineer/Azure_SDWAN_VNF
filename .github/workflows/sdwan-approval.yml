name: sdwan-approval

on:
  pull_request:
    paths:
      - "**/*.tf"
      - "ansible-sdwan/**"
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  TF_DIR: .
  ANS_DIR: ansible-sdwan

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform fmt/validate (no backend)
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform fmt -check
          terraform init -backend=false
          terraform validate

  deploy:
    needs: lint
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # ðŸ‘‡ This is the governance gate you configured in repo settings
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- NO Azure login here ----
      # After approver clicks "Approve", we only do optional verification + CMDB ingest.

      - name: Install Ansible & jq
        run: sudo apt-get update && sudo apt-get install -y ansible jq

      - name: Verify IPSec tunnel (optional)
        if: ${{ hashFiles(format('{0}/inventory/hosts.yml', env.ANS_DIR)) != '' }}
        run: |
          ansible -i $ANS_DIR/inventory/hosts.yml sdwan_edges -m ping
          ansible -i $ANS_DIR/inventory/hosts.yml sdwan_edges -b -m shell -a \
            'ipsec statusall | grep -q "CHILD_SA .* INSTALLED"'

      - name: Collect runtime facts (CMDB-lite, runner side)
        run: |
          mkdir -p cmdb
          date -u +%Y-%m-%dT%H:%M:%SZ > cmdb/pipeline_timestamp.txt
          # If inventory exists, capture versions/facts. These don't require Azure creds.
          if [ -f "$ANS_DIR/inventory/hosts.yml" ]; then
            ansible -i $ANS_DIR/inventory/hosts.yml sdwan_edges -b -m shell -a \
              'ipsec version || true; vtysh -c "show version" || true' > cmdb/versions.txt || true
          fi
          # Optionally ingest terraform-outputs.json that you push from local (see section B)
          if [ -f "cmdb/terraform-outputs.json" ]; then
            echo "Found local terraform-outputs.json committed/pushed; including in artifact."
          fi

      - name: Upload CMDB-lite artifact
        uses: actions/upload-artifact@v4
        with:
          name: cmdb-record
          path: cmdb/
